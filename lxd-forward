#!/usr/bin/env bash
# lxd-forward script
# Version 0.1
# Jorge Luiz Taioque
# jorgeluiztaioque at gmail dot com

# References
# the main idea was found on ugle-z.no, I got this ideia and improve to show and organize informations to turn human experience better

cmd=$1
version=$2
protocol=$3
container_name=$4
container_port=$5
host_port=$6

function usage() {
  echo "Usage: $(basename ${0})
  list
  add [ip_version v4/v6] [tcp/udp] [container] [port] [host port]
  del [ip_version v4/v6] [rule_number]

  Example:
  list
  add v4 [tcp/udp] ubuntu 80 80
  add v6 [tcp/udp] ubuntu 80 80
  del v4 1
  del v6 1"
  exit 1
}

function error() {
  echo "$1"
  exit 1
}

test -n "$cmd" || usage

function list() {
  echo "------------------------------------------------------------------------------------------------------------------------------------"
  printf "|\tRule\t|\tContainer\t|\tIP\t\t\t\t|  Protocol\t| Host port\t|   Container port |\n"
  echo "------------------------------------------------------------------------------------------------------------------------------------"

  containers=$(lxc list | grep RUNNING | awk '{print $2, $6, $9}')
  echo "${containers}" | while read line; do
    c_name=$(echo $line | awk '{print $1}')
    c_ip=$(echo $line | awk '{print $2}')
    c_ip6=$(echo $line | awk '{print $3}')
    forwarded_ports=$(iptables -t nat --line-numbers -L --numeric | grep $c_ip)
    forwarded_ports6=$(ip6tables -t nat --line-numbers -L --numeric | grep $c_ip6)
    echo "$forwarded_ports" | while IFS= read -r ports_line; do
      rule_no=$(echo $ports_line | awk '{print $1}')
      protocol=$(echo $ports_line | awk '{print $3}')
      host_port=$(echo $ports_line | awk '{print $8}')
      host_port=$(echo $host_port | awk -F\: '{print $2}')
      container=$(echo $ports_line | awk '{print $9}')
      container=$(echo $container | awk -F\: '{print $3}')
      if [ "${rule_no}" != "" ]; then
        printf "|\t${rule_no} v4\t|\t${c_name}\t|\t${c_ip}\t\t\t|\t${protocol}\t|\t${host_port}\t|\t${container}\t   |\n"
      fi
    done
    echo "$forwarded_ports6" | while IFS= read -r ports_line; do
      rule_no=$(echo $ports_line | awk '{print $1}')
      protocol=$(echo $ports_line | awk '{print $3}')
      host_port=$(echo $ports_line | awk '{print $7}')
      host_port=$(echo $host_port | awk -F\: '{print $2}')
      container=$(echo $ports_line | awk '{print $8}')
      container=$(echo $container | awk -F\]\: '{print $2}')
      if [ "${rule_no}" != "" ]; then
        printf "|\t${rule_no} v4\t|\t${c_name}\t|\t${c_ip}\t\t\t|\t${protocol}\t|\t${host_port}\t|\t${container}\t   |\n"
      fi
    done
    echo "------------------------------------------------------------------------------------------------------------------------------------"
done
}

function add() {
case "$version" in
  "v4") forward $protocol $container_name $container_port $host_port
  ;;
  "v6") forward6 $protocol $container_name $container_port $host_port
  ;;
  *) usage
  ;;
esac
}

function forward() {
  protocol=$1
  c_name=$2
  c_port=$3
  h_port=$4
  container_info=$(lxc list $c_name | grep RUNNING | awk '{print $2, $6, $9}' | grep $c_name)
  ip=$(echo -n $container_info | awk '{printf("%s",$2)}')
  test -n "$ip" || error "Container not found or not assigned an IP address"
  test -n "$c_port" || error "Container port not specified"
  test -n "$h_port" || h_port=$c_port

  iptables -t nat -A PREROUTING -p $protocol --dport "$h_port" -j DNAT --to-destination "${ip}:${c_port}"
}

function forward6() {
  protocol=$1
  c_name=$2
  c_port=$3
  h_port=$4
  container_info=$(lxc list $c_name | grep RUNNING | awk '{print $2, $6, $9}' | grep $c_name)
  ip6=$(echo -n $container_info | awk '{printf("%s",$3)}')
  test -n "$ip6" || error "Container not found or not assigned an IP6 address"
  test -n "$c_port" || error "Container port not specified"
  test -n "$h_port" || h_port=$c_port

  ip6tables -t nat -A PREROUTING -p $protocol --dport "$h_port" -j DNAT --to-destination "[${ip6}]":"${c_port}"
}

function del() {
case "$version" in
  "v4") delete $2
  ;;
  "v6") delete6 $2
  ;;
  *) usage
  ;;
esac
}

function delete() {
  rule_no=$1
  test -n "$rule_no" || error "Must specify rule no."
  iptables -t nat -D PREROUTING "${rule_no}"
}

function delete6() {
  rule_no=$1
  test -n "$rule_no" || error "Must specify rule no."
  ip6tables -t nat -D PREROUTING "${rule_no}"
}

case "$cmd" in
  "list") list
  ;;
  "add") add $version
  ;;
  "del") del $version $3 # Rule no.
  ;;
  *) usage
  ;;
esac
